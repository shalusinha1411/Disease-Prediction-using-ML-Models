# -*- coding: utf-8 -*-
"""Boosting Algorithms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VVNNPuEPV6gA0gJmfc7Gz5rbC813PpPf
"""

import pandas as pd 
import numpy as np 
import os, sys

data = pd.read_csv('parkinsons.data')
print(data.iloc[[0]])
data['status']

predictors = data.drop(['name'], axis = 1)
predictors = predictors.drop(['status'], axis = 1)
print(predictors.columns)
target = data['status']

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler((-1, 1))
X = scaler.fit_transform(predictors)
Y = target

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics

# feature scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X = sc_X.fit_transform(X)
from sklearn.svm import SVC
#applying PCA
from sklearn.decomposition import PCA
pca = PCA(n_components = 11)
X = pca.fit_transform(X)
variance = pca.explained_variance_ratio_

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = .30, random_state = 7) 
#70:30 ratio

from sklearn.ensemble import AdaBoostClassifier
from sklearn import datasets

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier

clf=RandomForestClassifier(n_estimators=100)
svc=SVC(probability=True, kernel='rbf')
dtc = DecisionTreeClassifier()


# Create adaboost classifer object
abc =AdaBoostClassifier(n_estimators=200, base_estimator=clf,learning_rate=1)

# Train Adaboost Classifer
model = abc.fit(X_train, Y_train)

#Predict the response for test dataset
y_pred = model.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy- RFC:",metrics.accuracy_score(Y_test, y_pred))

#SVC
abc2 =AdaBoostClassifier(n_estimators=100, base_estimator=svc,learning_rate=0.8)
model = abc2.fit(X_train, Y_train)
y_pred = model.predict(X_test)
print("Accuracy- SVC:",metrics.accuracy_score(Y_test, y_pred))

#dtc
abc3 =AdaBoostClassifier(n_estimators=100, base_estimator=dtc,learning_rate=0.8)
model = abc3.fit(X_train, Y_train)
y_pred = model.predict(X_test)
print("Accuracy- CART:",metrics.accuracy_score(Y_test, y_pred))